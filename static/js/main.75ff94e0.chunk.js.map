{"version":3,"sources":["components/IngredientsList.js","components/SearchForm.js","components/App.js","serviceWorker.js","index.js"],"names":["IngredientsList","react_default","a","createElement","className","this","props","recipes","map","item","key","uuid","href","alt","title","target","src","thumbnail","ingredients","split","index","Component","SearchForm","state","showIngredients","searchPhrase","toggleList","_this","setState","_this2","onSubmit","submit","rows","type","value","onChange","change","onClick","onMouseLeave","ingredient","src_components_IngredientsList","App","err","handleInputChange","e","oldValue","newValue","concat","innerHTML","handleSubmit","preventDefault","replace","API","fetch","then","response","ok","Error","json","data","results","catch","console","log","prevState","src_components_SearchForm","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75ff94e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './IngredientsList.css';\r\nimport uuid from 'react-uuid';\r\n\r\nclass IngredientsList extends Component {\r\n\r\nrender(){\r\n  return (\r\n  <div className=\"ingredients-list\">\r\n      {this.props.recipes.map(item => (\r\n        <div className=\"ingredients-item\" key={uuid()}>\r\n          <div className=\"ingredient-link\">\r\n            <a href={item.href} alt={item.title} target=\"blank\">{item.title}</a>\r\n          </div>\r\n          <div className=\"ingredient-properties\">\r\n              <div className=\"ingredient-img\"><img src={item.thumbnail} alt={item.title}></img></div>\r\n              <div className={'ingredient-tags'}>\r\n              {item.ingredients.split(',').map((item, index) => (<span key={index} >{item}</span>))}\r\n              </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n  </div>\r\n);\r\n}\r\n\r\n};\r\n\r\nexport default IngredientsList;\r\n\r\n","import React, { Component } from 'react';\r\nimport './SearchForm.css';\r\nimport IngredientsList from './IngredientsList';\r\n\r\n\r\n\r\nclass SearchForm extends Component {\r\n    state = {\r\n        showIngredients: false,\r\n        searchPhrase: ''\r\n    }\r\n\r\n    toggleList = () => {\r\n        this.setState({\r\n            showIngredients:  !this.state.showIngredients\r\n        })\r\n    }\r\n\r\n    ingredients = [\r\n        'Garlic',\r\n        'Chicken',\r\n        'Potatoes',\r\n        'Rice',\r\n        'Tomato',\r\n        'Broccoli',\r\n        'Cheddar',\r\n        'Cereal',\r\n        'Beef',\r\n        'Lobster',\r\n        'Salmon',\r\n        'Mushrooms',\r\n        'Onions',\r\n        'Apples',\r\n        'Oranges',\r\n        'Burritos'\r\n    ];\r\n\r\n    render() {\r\n        return <div>\r\n                <div className=\"header\">\r\n                   Aplikacja ułatwiająca wyszukiwanie przepisów kulinarnych \r\n                </div>\r\n                <div className=\"content\">\r\n                    <form onSubmit={this.props.submit}  className=\"search\" >\r\n                        <div className=\"search-label-container\">\r\n                            <label>Wyszukaj składniki:</label>\r\n                        </div>\r\n                        <div className={\"input-container\"}>  \r\n                            <textarea \r\n                                className=\"textarea\" rows=\"5\" \r\n                                type=\"text\"\r\n                                value={this.props.value}\r\n                                onChange={this.props.change}\r\n                                >\r\n                            </textarea>\r\n                            <div className=\"toggle-list-container\">\r\n                                <span className={\"toggle-list\"} onClick={this.toggleList}>{this.state.showIngredients ? <span>&#x25b2;</span> : <span>&#x25BC;</span> }</span>\r\n                            </div>\r\n                            <div className={this.state.showIngredients ? 'show' : 'hidden'} onMouseLeave={this.toggleList}>\r\n                                {this.ingredients.map((ingredient, index) => {\r\n                                return <div key={index} onClick={this.props.change}>{ingredient}</div>\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"search-button-container\">\r\n                            <button type={'submit'}>Wyszukaj</button>\r\n                        </div>\r\n                    </form>\r\n                    {this.props.submit ?  \r\n                        <IngredientsList recipes={this.props.recipes} showIngredients={this.state.showIngredients}\r\n                    /> : <h1 className=\"text-center\">...loading</h1> }\r\n                </div>\r\n                <div className=\"footer\">&copy;2020&nbsp; Dorota Kora</div>\r\n            </div>\r\n    }\r\n};\r\n\r\nexport default SearchForm","import React, { Component } from 'react';\r\nimport SearchForm from './SearchForm';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    value: '',\r\n    recipes: [],\r\n    err: false\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    let oldValue = this.state.value;\r\n    let newValue = e.target.value ? `${e.target.value}` : oldValue + ` ${e.target.innerHTML}`;\r\n    this.setState({\r\n        value: newValue\r\n    })\r\n  }; \r\n\r\n\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        let value = this.state.value.replace(/ /g, \",\").replace(/^,|,$/g,'');\r\n    \r\n        const API = `https://cors-anywhere.herokuapp.com/http://www.recipepuppy.com/api/?i=${value}&p=10`\r\n        fetch(API)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response\r\n                }\r\n                throw Error(\"Wystąpił błąd\")\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              \r\n                this.setState(state => {\r\n                  let recipes = data.results;\r\n                    return {\r\n                      recipes\r\n                    }\r\n                })  \r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.setState(prevState => ({\r\n                    err: true\r\n                }))\r\n            });\r\n    };\r\n\r\n     \r\n\r\n\r\n  render() {\r\n    return <div className=\"container\">\r\n            <SearchForm value={this.state.value}\r\n                        change={this.handleInputChange}\r\n                        submit={this.handleSubmit}\r\n                        recipes={this.state.recipes}/>\r\n          </div>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}